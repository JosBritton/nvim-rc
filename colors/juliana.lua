---@param group string
---@param style table<string, any>
local hl = function(group, style)
    vim.api.nvim_set_hl(0, group, style)
end

---@class Juliana
local M = {
    ---@class Configuration
    config = {
        ---@class Colors
        colors = {
            fg1 = "#ffffff",
            fg2 = "#d8dee9",
            fg3 = "#a6acb9",
            fg4 = "#46525c",
            bg1 = "#444e59",
            selection_bg = "#3f4750",
            bg2 = "#303841",
            bg3 = "#2e353e",
            diff_text = "#373f48",
            diff_add = "#41525a",
            diff_change = "#585249",
            diff_remove = "#4f434a",
            text_fg = "#d9d9d9",
            yellow1 = "#fac761",
            yellow2 = "#f9ae58",
            yellow3 = "#ee932b",
            green = "#99c794",
            magenta = "#c695c6",
            orange = "#f97b58",
            red1 = "#c76b70",
            red2 = "#ec5f66",
            blue1 = "#95b2d6",
            blue2 = "#5c99d6",
            cyan1 = "#87c7c7",
            cyan2 = "#5fb4b4",
        },
    },
}

---@return nil
function M:load()
    if vim.g.colors_name then
        vim.cmd("hi clear")
    end
    vim.cmd("set t_Co=256")
    vim.g.colors_name = "juliana"

    local C = self.config.colors
    local default = { fg = C.fg2, bg = C.bg2 }
    local muted = { fg = C.fg3 }
    local selection = { bg = C.selection_bg }
    local text_red = { fg = C.red2 }
    local text_yellow = { fg = C.yellow2 }
    local text_yellow_italic = { fg = C.yellow2, italic = true }
    local text_green = { fg = C.green }
    local text_cyan = { fg = C.cyan2 }
    local text_magenta = { fg = C.magenta }
    local text_selected = { bg = C.bg1 }
    local text_emphasis = { fg = C.fg1 }
    local text_orange = { fg = C.orange }
    local text_magenta_italic = { fg = C.magenta, italic = true }
    local ui_title = { fg = C.fg2, bold = true }
    local ui_select = { bg = C.bg1, fg = C.fg1 }
    local ui_thumb = { bg = C.bg3, fg = C.bg1 }
    local current_line = { fg = C.fg1, bg = C.selection_bg }
    local search = { fg = C.bg3, bg = C.yellow1, bold = true }
    local text_blue = { fg = C.blue2 }

    hl("Normal", default)
    hl("Visual", selection)
    hl("Pmenu", { bg = C.bg3 })
    hl("NormalFloat", { link = "Pmenu" })
    hl("WildMenu", { link = "Pmenu" })
    hl("NonText", { fg = C.fg4 })
    hl("FloatBorder", { link = "NonText" })
    hl("PmenuSel", ui_select)
    hl("PmenuSbar", ui_thumb)
    hl("PmenuThumb", text_selected)
    hl("Whitespace", { link = "NonText" })
    hl("Conceal", { link = "NonText" })
    hl("WinSeparator", { link = "NonText" })
    hl("VertSplit", { link = "NonText" })
    hl("CursorLineNr", current_line)
    hl("CursorLine", selection)
    hl("CursorColumn", selection)
    hl("CursorColumn", selection)
    hl("ColorColumn", selection)
    hl("SignColumn", default)
    hl("CursorLineFold", default)
    hl("LineNr", current_line)
    hl("LineNrAbove", muted)
    hl("LineNrBelow", muted)
    hl("DiffAdd", { fg = "NONE", bg = C.diff_add })
    hl("DiffDelete", { fg = "NONE", bg = C.diff_remove })
    hl("DiffText", { fg = "NONE", bg = C.diff_text })
    hl("Directory", text_cyan)
    hl("EndOfBuffer", { link = "NonText" })
    hl("Error", text_orange)
    hl("ErrorMsg", text_red)
    hl("Folded", muted)
    hl("FoldColumn", muted)
    hl("ModeMsg", { fg = C.fg2 })
    hl("MoreMsg", text_emphasis)
    hl("Question", { fg = C.magenta })
    hl("Search", search)
    hl("IncSearch", search)
    hl("Substitute", search)
    hl("SpellBad", { sp = C.red2, undercurl = true })
    hl("SpellCap", { sp = C.yellow2, undercurl = true })
    hl("SpellLocal", { sp = C.cyan2, undercurl = true })
    hl("SpellRare", { sp = C.magenta, undercurl = true })
    hl("StatusLine", { fg = C.fg2, bg = C.bg1 })
    hl("StatusLineNC", { fg = C.fg2, bg = C.bg3 })
    hl("WinBar", { link = "StatusLine" })
    hl("WinBarNC", { link = "StatusLine" })
    hl("StatusBlack", { fg = C.fg3, bg = C.bg1 })
    hl("StatusRed", { fg = C.red2, bg = C.bg1 })
    hl("StatusGreen", { fg = C.green, bg = C.bg1 })
    hl("StatusYellow", { fg = C.yellow2, bg = C.bg1 })
    hl("StatusBlue", { fg = C.blue2, bg = C.bg1 })
    hl("StatusMagenta", { fg = C.magenta, bg = C.bg1 })
    hl("StatusCyan", { fg = C.cyan2, bg = C.bg1 })
    hl("StatusWhite", { fg = "fg", bg = C.bg1 })
    hl("StatusOrange", { fg = C.orange, bg = C.bg1 })
    hl("TabLine", { fg = C.fg2, bg = C.bg1 })
    hl("TabLineFill", { fg = C.fg3, bg = C.bg1 })
    hl("TabLineSel", default)
    hl("WarningMsg", { fg = C.yellow3, bg = C.bg3 })
    hl("MatchParen", { bold = true })
    hl("DiagnosticError", { fg = C.red1, bg = "NONE" })
    hl("DiagnosticSignError", { fg = C.red1, bold = true, bg = "NONE" })
    hl("DiagnosticUnderlineError", {})
    hl("DiagnosticVirtualTextError", { fg = C.red1, bg = "NONE" })
    hl("DiagnosticHint", { fg = C.cyan1, bg = "NONE" })
    hl("DiagnosticSignHint", { fg = C.cyan1, bold = true, bg = "NONE" })
    hl("DiagnosticUnderlineHint", {})
    hl("DiagnosticVirtualTextHint", { fg = C.cyan1, bg = "NONE" })
    hl("DiagnosticInfo", { fg = C.green, bg = "NONE" })
    hl("DiagnosticSignInfo", { fg = C.green, bold = true, bg = "NONE" })
    hl("DiagnosticUnderlineInfo", {})
    hl("DiagnosticVirtualTextInfo", { fg = C.green, bg = "NONE" })
    hl("DiagnosticWarn", { fg = C.yellow1, bg = "NONE" })
    hl("DiagnosticSignWarn", { fg = C.yellow1, bold = true, bg = "NONE" })
    hl("DiagnosticUnderlineWarn", {})
    hl("DiagnosticVirtualTextWarn", { fg = C.yellow1, bg = "NONE" })
    hl("Boolean", { fg = C.red2, italic = true })
    hl("Character", text_green)
    hl("Comment", muted)
    hl("SpecialComment", muted)
    hl("Conditional", { fg = C.magenta })
    hl("Constant", text_red)
    hl("Define", text_magenta_italic)
    hl("Delimiter", muted)
    hl("Float", { fg = C.yellow1 })
    hl("Function", text_magenta_italic)
    hl("Identifier", { fg = C.fg2 })
    hl("Include", text_red)
    hl("Keyword", text_magenta_italic)
    hl("Label", text_cyan)
    hl("Macro", text_cyan)
    hl("Number", { fg = C.yellow1 })
    hl("Operator", text_orange)
    hl("PreCondit", text_red)
    hl("PreProc", text_cyan)
    hl("Repeat", text_magenta_italic)
    hl("Special", text_cyan)
    hl("SpecialChar", text_cyan)
    hl("SpecialKey", text_cyan)
    hl("Statement", { fg = C.fg2 })
    hl("StorageClass", text_red)
    hl("String", { fg = C.green })
    hl("Exception", text_magenta_italic)
    hl("Struct", text_red)
    hl("Structure", text_yellow)
    hl("Tag", text_red)
    hl("Title", ui_title)
    hl("Todo", { fg = C.blue2, bold = true })
    hl("Type", text_yellow)
    hl("Typedef", text_yellow)
    hl("Underlined", { underdotted = true })
    hl("@boolean", { fg = C.red2, italic = true })
    hl("@character", text_cyan)
    hl("@character.special", text_cyan)
    hl("@comment", muted)
    hl("@conditional", { fg = C.magenta })
    hl("@constant", text_emphasis)
    hl("@constant.builtin", { fg = C.fg2, italic = true })
    hl("@constant.macro", text_magenta_italic)
    hl("@constructor.javascript", { fg = C.yellow2 })
    hl("@constructor.lua", text_emphasis)
    hl("@constructor.typescript", { fg = C.yellow2 })
    hl("@conditional.ternary.typescript", text_orange)
    hl("@enum", { fg = C.yellow2 })
    hl("@exception.rust", text_blue)
    hl("@field", { fg = C.blue1 })
    hl("@field.toml", text_red)
    hl("@field.yaml", text_cyan)
    hl("@float", { fg = C.yellow1 })
    hl("@function", text_cyan)
    hl("@function.builtin", { fg = C.blue2, italic = true })
    hl("@function.call", text_blue)
    hl("@function.css", text_blue)
    hl("@function.macro", text_blue)
    hl("@function.macro.commonlisp", text_red)
    hl("@include", text_magenta_italic)
    hl("@interface", { fg = C.yellow2 })
    hl("@keyword", text_magenta_italic)
    hl("@keyword.lua", text_red)
    hl("@keyword.function", text_magenta_italic)
    hl("@keyword.function.python", { fg = C.red2, italic = true })
    hl("@keyword.operator", text_orange)
    hl("@keyword.return", { fg = C.magenta })
    hl("@keyword.coroutine", text_red)
    hl("@label", text_cyan)
    hl("@label.json", text_cyan)
    hl("@label.toml", text_cyan)
    hl("@label.vim", { fg = C.blue1 })
    hl("@method", text_cyan)
    hl("@method.call", text_blue)
    hl("@namespace", { fg = C.yellow2 })
    hl("@number", { fg = C.yellow1 })
    hl("@number.bash", { fg = C.yellow2 })
    hl("@operator", text_orange)
    hl("@parameter", { fg = C.fg2 })
    hl("@parameter.bash", { fg = C.fg2 })
    hl("@parameter.reference", { fg = C.fg2 })
    hl("@preproc", text_cyan)
    hl("@property", { fg = C.blue1 })
    hl("@property.toml", text_cyan)
    hl("@punctuation.delimiter", text_cyan)
    hl("@punctuation.bracket", { fg = C.fg2 })
    hl("@punctuation.delimiter.python", text_emphasis)
    hl("@punctuation.delimiter.yaml", text_blue)
    hl("@punctuation.special", text_cyan)
    hl("@punctuation.special.markdown", { fg = C.orange, bold = false })
    hl("@repeat", text_magenta_italic)
    hl("@repeat.python", text_red)
    hl("@storageclass", text_red)
    hl("@storageclass.lifetime", text_cyan)
    hl("@string", { fg = C.green })
    hl("@string.delimiter", text_cyan)
    hl("@string.escape", text_cyan)
    hl("@string.regex", text_cyan)
    hl("@string.special", text_cyan)
    hl("@symbol", text_cyan)
    hl("@tag", text_red)
    hl("@tag.attribute", text_magenta)
    hl("@tag.delimiter", text_cyan)
    hl("@tag.delimiter.markdown", text_blue)
    hl("@tag.delimiter.markdown_inline", text_blue)
    hl("@tag.rust", text_cyan)
    hl("@tag.rust.lua", text_cyan)
    hl("@text", { fg = C.text_fg })
    hl("@text.emphasis", { italic = true, bold = true })
    hl("@text.literal", { fg = C.green, italic = true })
    hl("@text.literal.markdown_inline", { bg = C.bg1, fg = C.fg2 })
    hl("@text.reference", { fg = C.cyan2, underdotted = false })
    hl("@text.strong", { bold = true })
    hl("@text.title", ui_title)
    hl("@text.underline", { underline = true })
    hl("@text.uri", { fg = C.blue2, underdotted = true })
    hl("@type", { fg = C.yellow2 })
    hl("@type.builtin", { fg = C.blue2, italic = true })
    hl("@type.definition", { fg = C.yellow2 })
    hl("@type.qualifier", text_red)
    hl("@variable", { fg = C.fg2 })
    hl("@variable.builtin", { fg = C.fg2, italic = true })
    hl("@variable.builtin.clojure", { fg = C.fg2, italic = true })
    hl("@variable.builtin.javascript", { fg = C.fg2, italic = true })
    hl("gitCommitSelectedFile", { italic = true })
    hl("gitCommitSummary", { bold = true })
    hl("gitCommitTrailerToken", text_magenta_italic)
    hl("gitconfigVariable", { fg = C.blue1 })
    hl("gitcommitFirstLine", { bold = true })
    hl("justBody", { fg = C.fg2 })
    hl("justInterpolationDelim", text_blue)
    hl("justParameter", text_orange)
    hl("justAssignment", text_emphasis)
    hl("justBuiltInFunctions", { italic = true, fg = C.blue2 })
    hl("justRecipeName", { fg = C.yellow3 })
    hl("justFunction", text_cyan)
    hl("vimContinue", { link = "NonText" })
    hl("manSectionHeading", { fg = C.fg1, bold = true })
    hl("healthHelp", { fg = C.yellow1 })
    hl("healthSuccess", text_green)
    hl("markdownRule", text_red)
    hl("markdownLinkText", { fg = C.fg2 })
    hl("markdownUrl", { fg = C.blue2, underline = true })
    hl("markdownLinkDelimiter", text_cyan)
    hl("markdownH1Delimiter", { fg = C.orange, bold = false })
    hl("markdownH2Delimiter", { fg = C.orange, bold = false })
    hl("markdownCode", text_selected)
    hl("markdownCodeDelimiter", text_blue)
    hl("markdownListMarker", { fg = C.yellow1 })
    hl("htmlTagName", text_red)
    hl("qfFileName", text_cyan)
    hl("qfLineNr", { bold = true })
    hl("tmuxCommands", text_magenta_italic)
    hl("tmuxFlags", { fg = C.yellow2 })
    hl("tmuxFormatString", text_cyan)
    hl("FennelStringDelimiter", text_cyan)
    hl("FennelParen", text_emphasis)
    hl("FennelSpecialForm", text_magenta_italic)
    hl("FennelKeyword", text_red)
    hl("luaFunc", text_blue)
    hl("luaTable", { fg = C.fg2 })
    hl("luaStringDelimiter", text_blue)
    hl("helpHyperTextEntry", { fg = C.blue2, underdotted = true })
    hl("helpSectionDelim", { fg = C.red2, bold = true })
    hl("helpHyperTextJump", { fg = C.blue2, underdotted = true })
    hl("helpHeader", { fg = C.fg2, bold = true })
    hl("helpExample", text_green)
    hl("helpURL", { fg = C.blue2, underline = true })
    hl("helpCommand", { bg = C.bg1, italic = true })
    hl("rainbowcol1", text_magenta)
    hl("rainbowcol2", text_orange)
    hl("rainbowcol3", text_green)
    hl("rainbowcol4", text_red)
    hl("rainbowcol5", text_cyan)
    hl("rainbowcol6", { fg = C.yellow1 })
    hl("rainbowcol7", { fg = C.yellow3 })
    hl("IndentBlanklineChar", { fg = C.fg4, bg = "NONE", nocombine = true })
    hl("IndentBlanklineSpaceChar", { fg = "NONE", bg = "NONE", nocombine = true })
    hl(
        "IndentBlanklineSpaceCharBlankline",
        { fg = "NONE", bg = "NONE", nocombine = true }
    )
    hl("IndentBlanklineContextChar", { fg = C.fg3, bg = "NONE", nocombine = true })
    hl("IndentBlanklineContextSpaceChar", { fg = "NONE", bg = "NONE", nocombine = true })
    hl(
        "IndentBlanklineContextStart",
        { fg = "NONE", bg = "NONE", sp = C.fg3, underdotted = true }
    )

    hl("BlinkCmpLabelDeprecated", { strikethrough = true })
    -- hl("BlinkCmpLabelDetail", {})
    -- hl("BlinkCmpLabelDescription", {})
    -- hl("BlinkCmpSource", {})
    -- hl("BlinkCmpKind", {})

    hl("BlinkCmpKindStruct", { fg = C.yellow2 })
    hl("BlinkCmpKindFunction", text_blue)
    hl("BlinkCmpKindText", { fg = C.fg2 })
    hl("BlinkCmpKindClass", { fg = C.yellow2 })
    hl("BlinkCmpKindValue", text_orange)
    hl("BlinkCmpKindEnum", { fg = C.yellow2 })
    hl("BlinkCmpKindInterface", { fg = C.yellow2 })
    hl("BlinkCmpKindMethod", text_cyan)
    hl("BlinkCmpKindUnit", text_red)
    hl("BlinkCmpKindConstant", text_emphasis)
    hl("BlinkCmpKindField", text_blue)
    hl("BlinkCmpKindModule", { fg = C.yellow2 })
    hl("BlinkCmpKindKeyword", text_magenta_italic)
    hl("BlinkCmpKindEnumMember", text_emphasis)
    hl("BlinkCmpKindProperty", text_blue)
    hl("BlinkCmpKindOperator", text_orange)
    hl("BlinkCmpKindReference", { fg = C.fg2 })
    hl("BlinkCmpKindSnippet", text_emphasis)
    hl("BlinkCmpKindTypeParameter", { fg = C.yellow2 })
    hl("BlinkCmpKindVariable", { fg = C.fg2 })

    hl("BlinkCmpScrollBarThumb", { link = "PmenuThumb" })
    hl("BlinkCmpScrollBarGutter", { link = "PmenuSbar" })

    hl("BlinkCmpGhostText", { link = "NonText" })

    hl("BlinkCmpMenu", { link = "Pmenu" })
    hl("BlinkCmpMenuBorder", { link = "Pmenu" })
    hl("BlinkCmpMenuSelection", { link = "PmenuSel" })

    hl("BlinkCmpDoc", { link = "NormalFloat" })
    hl("BlinkCmpDocBorder", { link = "NormalFloat" })
    hl("BlinkCmpDocSeparator", { link = "NormalFloat" })
    hl("BlinkCmpDocCursorLine", { link = "Visual" })

    hl("BlinkCmpSignatureHelp", { link = "NormalFloat" })
    hl("BlinkCmpSignatureHelpBorder", { link = "NormalFloat" })
    hl("BlinkCmpSignatureHelpActiveParameter", { link = "LspSignatureActiveParameter" })

    hl("CmpItemAbbrDeprecated", { strikethrough = true })
    hl("CmpItemKindStruct", { fg = C.yellow2 })
    hl("CmpItemKindFunction", text_blue)
    hl("CmpItemKindText", { fg = C.fg2 })
    hl("CmpItemKindClass", { fg = C.yellow2 })
    hl("CmpItemKindValue", text_orange)
    hl("CmpItemKindEnum", { fg = C.yellow2 })
    hl("CmpItemKindInterface", { fg = C.yellow2 })
    hl("CmpItemKindMethod", text_cyan)
    hl("CmpItemKindUnit", text_red)
    hl("CmpItemKindConstant", text_emphasis)
    hl("CmpItemKindField", text_blue)
    hl("CmpItemKindModule", { fg = C.yellow2 })
    hl("CmpItemKindKeyword", text_magenta_italic)
    hl("CmpItemKindEnumMember", text_emphasis)
    hl("CmpItemKindProperty", text_blue)
    hl("CmpItemKindOperator", text_orange)
    hl("CmpItemKindReference", { fg = C.fg2 })
    hl("CmpItemKindSnippet", text_emphasis)
    hl("CmpItemKindTypeParameter", { fg = C.yellow2 })
    hl("CmpItemKindVariable", { fg = C.fg2 })
    hl("LeapMatch", { fg = C.bg3, bg = C.orange, bold = true })
    hl("LeapLabelPrimary", { fg = C.bg3, bg = C.yellow2, bold = true })
    hl("LeapLabelSecondary", { fg = C.bg3, bg = C.yellow3, bold = true })
    hl("LeapLabelSelected", { fg = C.bg3, bg = C.yellow1, bold = true })
    hl("LeapBackdrop", { fg = "NONE", bg = C.bg3 })
    hl("Sneak", { fg = C.bg3, bg = C.yellow2, bold = true })
    hl("SneakLabel", { fg = C.bg3, bg = C.yellow2, bold = true })
    hl("GitSignsDelete", text_red)
    hl("GitSignsChange", { fg = C.yellow2 })
    hl("GitSignsAdd", text_green)
    hl("packerHash", text_red)
    hl("packerString", text_green)
    hl("packerStatusSuccess", text_green)
    hl("LspReferenceText", { underline = true, sp = C.fg3, bg = "NONE", fg = "NONE" })
    hl("LspReferenceRead", { underline = true, sp = C.fg3, bg = "NONE", fg = "NONE" })
    hl("LspReferenceWrite", { underline = true, sp = C.fg3, bg = "NONE", fg = "NONE" })
    hl("TelescopeBorder", { link = "NonText" })
    hl("TelescopeTitle", ui_title)
    hl("TelescopePromptCounter", { fg = C.fg2 })
    hl("TelescopeMatching", { bg = C.bg2 })
    hl("TelescopeSelectionCaret", { fg = C.fg2 })
    hl("TelescopeSelection", text_selected)
    hl("FloatTitle", ui_title)
    hl("FocusedSymbol", text_selected)
    hl("TroubleIndent", { bg = C.bg2 })
    hl("TroubleLocation", { bold = true })
    hl("NvimTreeNormal", { fg = C.fg2, bg = C.bg3 })
    hl("NvimTreeRootFolder", { fg = C.fg2 })
    hl("NvimTreeIndentMarker", { fg = C.fg3 })
    hl("NvimTreeOpenedFolderName", { underdotted = true })
    hl("NvimTreeOpenedFile", text_selected)
    hl("NvimTreeFolderName", { fg = C.fg2 })
    hl("NvimTreeEmptyFolderName", muted)
    hl("NvimTreeFolderIcon", muted)
    hl("NvimTreeExecFile", { fg = C.green, bold = true })
    hl("NvimTreeFileDeleted", muted)
    hl("NvimTreeFileNew", { fg = C.bg3 })
    hl("NvimTreeSpecialFile", { fg = C.fg2 })
    hl("NvimTreeGitDirty", text_red)
    hl("NvimTreeGitStaged", text_green)
    hl("NvimTreeGitRenamed", { fg = C.yellow2 })
    hl("NvimTreeGitDeleted", text_red)
    hl("NvimTreeSymlink", { fg = C.cyan2, bg = C.bg3 })
    hl("NotifyERRORBorder", { fg = C.red1 })
    hl("NotifyWARNBorder", { fg = C.yellow1 })
    hl("NotifyINFOBorder", text_green)
    hl("NotifyDEBUGBorder", text_orange)
    hl("NotifyTRACEBorder", text_magenta)
    hl("NotifyERRORIcon", text_red)
    hl("NotifyWARNIcon", text_yellow)
    hl("NotifyINFOIcon", text_green)
    hl("NotifyDEBUGIcon", text_orange)
    hl("NotifyTRACEIcon", text_magenta)
    hl("NotifyERRORTitle", { fg = C.red1, bold = true })
    hl("NotifyWARNTitle", { fg = C.yellow1, bold = true })
    hl("NotifyINFOTitle", { fg = C.green, bold = true })
    hl("NotifyDEBUGTitle", { fg = C.orange, bold = true })
    hl("NotifyTRACETitle", { fg = C.magenta, bold = true })
    hl("NotifyERRORBody", { fg = C.fg2 })
    hl("NotifyWARNBody", { fg = C.fg2 })
    hl("NotifyINFOBody", { fg = C.fg2 })
    hl("NotifyDEBUGBody", { fg = C.fg2 })
    hl("NotifyTRACEBody", { fg = C.fg2 })
    hl("DevIconGitAttributes", text_cyan)
    hl("DevIconGitCommit", text_red)
    hl("DevIconGitConfig", text_cyan)
    hl("DevIconGitIgnore", text_red)
    hl("DevIconGitModules", text_cyan)
    hl("DevIconDropbox", text_blue)
    hl("DevIconToml", text_cyan)
    hl("DevIconYaml", text_cyan)
    hl("DevIconJson", { fg = C.yellow2 })
    hl("DevIconYml", text_cyan)
    hl("DevIconMd", text_emphasis)
    hl("DevIconGo", text_blue)
    hl("DevIconTs", text_blue)
    hl("DevIconTsx", text_blue)
    hl("DevIconDsStore", muted)
    hl("DevIconDockerfile", text_blue)
    hl("DevIconScheme", text_emphasis)
    hl("@lsp.type.type", text_yellow)
    hl("@lsp.typemod.type.defaultLibrary", { fg = C.blue2, italic = true })
    hl("@lsp.typemod.type.documentation", text_yellow)
    hl("@lsp.type.enum", text_yellow)
    hl("@lsp.typemod.enum.defaultLibrary", { fg = C.blue2, italic = true })
    hl("@lsp.type.interface", text_yellow)
    hl("@lsp.typemod.interface.defaultLibrary", { fg = C.blue2, italic = true })
    hl("@lsp.type.class", text_yellow)
    hl("@lsp.typemod.class.defaultLibrary", text_yellow_italic)
    hl("@lsp.type.struct", { fg = C.yellow2 })
    hl("@lsp.typemod.struct.defaultLibrary", { fg = C.blue2, italic = true })
    hl("@lsp.type.macro", { fg = C.yellow2 })
    hl("@lsp.typemod.function.definition", text_cyan)
    hl("@lsp.type.function", { fg = C.blue2, nocombine = true })
    hl("@lsp.typemod.function.declaration", text_cyan)
    hl("@lsp.typemod.function.modification", text_cyan)
    hl("@lsp.typemod.function.defaultLibrary", { italic = true })
    hl("@lsp.typemod.function.documentation", text_blue)
    hl("@lsp.type.method", text_cyan)
    hl("@lsp.typemod.method.definition", text_cyan)
    hl("@lsp.type.property", { fg = C.blue1 })
    hl("@lsp.type.variable", { fg = C.fg2 })
    hl("@lsp.type.decorator", { fg = C.cyan2, bold = true })
    hl(
        "@lsp.typemod.decorator.defaultLibrary",
        { fg = C.cyan2, bold = true, italic = true }
    )
    hl("@lsp.type.namespace", { fg = C.yellow2 })
    hl("@lsp.typemod.namespace.defaultLibrary", { fg = C.yellow2, italic = true })
    hl("@lsp.type.parameter", { fg = C.fg2 })
    hl("@lsp.type.enumMember", { fg = C.blue1 })
    hl("@lsp.type.typeParameter", { fg = C.yellow2 })
    hl("@lsp.mod.defaultLibrary", { italic = true })
    hl("@lsp.mod.deprecated", { strikethrough = true })
    hl("@lsp.mod.declaration", {})
    hl("@lsp.typemod.variable.global.lua", { fg = C.fg1, italic = true })
    hl("FzfLuaNormal", default)
    hl("FzfLuaBorder", { link = "NonText" })
    hl("FzfLuaCursor", default)
    hl("FzfLuaSearch", search)
    hl("FzfLuaTitle", ui_title)
    hl("FzfLuaCursorLine", ui_select)
    hl("FzfLuaCursorLineNr", ui_select)
    hl("dosiniLabel", text_cyan)
    hl("dosiniHeader", text_red)
    hl("CopilotSuggestion", { bg = C.bg3, fg = C.fg3 })
    hl("NoiceCursor", { fg = C.fg2 })
    hl("CocCodeLens", { fg = C.fg3, bg = C.bg3 })
    hl("CocDisabled", { fg = C.fg3, bg = C.bg3 })
    hl("CocGitAddedSign", { fg = C.cyan1 })
    hl("CocGitChangedSign", { fg = C.yellow1 })
    hl("CocGitRemovedSign", { fg = C.red1 })
    hl("CocGitTopRemovedSign", { fg = C.red1 })
    hl("CocGitChangeRemovedSign", text_red)
    hl("CocCursorRange", { fg = C.bg3, bg = C.yellow1, bold = true })
    hl("CocSelectedRange", { fg = C.bg3, bg = C.yellow1, bold = true })
    hl("CocListsDesc", muted)
    hl("CocFloatActive", { bg = C.bg1, fg = C.fg1, bold = false })
    hl("CocFloatDividin", { link = "NonText" })
    hl("CocFloatSbar", ui_thumb)
    hl("CocFloatThumb", text_selected)
    hl("CocFadeOut", muted)
    hl("CocPumVirtualText", muted)
    hl("CocHighlightRead", { underline = true, bg = "NONE", fg = "NONE" })
    hl("CocHighlightText", { underline = true, bg = "NONE", fg = "NONE" })
    hl("CocHighlightWrite", { underline = true, bg = "NONE", fg = "NONE" })
    hl("CocHintFloat", { bold = true, bg = "NONE", fg = "NONE" })
    hl("CocInlayHint", { fg = C.fg3, bg = "NONE" })
    hl("CocHoverRange", { underline = true, bg = "NONE", sp = "NONE" })
    hl("CocInlayHintType", { fg = C.fg3, bg = "NONE" })
    hl("CocInlayHintParameter", { fg = C.fg3, bg = "NONE" })
    hl("CocListLine", { bg = C.bg1, fg = C.fg1, bold = false })
    hl("CocListPath", { fg = C.fg2 })
    hl("CocListMode", { fg = C.fg2 })
    hl("CocListFgGreen", { fg = C.green, bg = "NONE" })
    hl("CocListFgRed", { fg = C.red2, bg = "NONE" })
    hl("CocListFgBlue", { fg = C.blue2, bg = "NONE" })
    hl("CocListFgCyan", { fg = C.cyan2, bg = "NONE" })
    hl("CocListFgGrey", { fg = C.fg3, bg = "NONE" })
    hl("CocListFgWhite", { fg = C.fg1, bg = "NONE" })
    hl("CocListFgYellow", { fg = C.yellow2, bg = "NONE" })
    hl("CocListFgMagenta", { fg = C.magenta, bg = "NONE" })
    hl("CocListBgGreen", { fg = "NONE", bg = C.green })
    hl("CocListBgRed", { fg = "NONE", bg = C.red2 })
    hl("CocListBgBlue", { fg = "NONE", bg = C.blue2 })
    hl("CocListBgCyan", { fg = "NONE", bg = C.cyan2 })
    hl("CocListBgGrey", { fg = "NONE", bg = C.fg3 })
    hl("CocListBgWhite", { fg = "NONE", bg = C.fg1 })
    hl("CocListBgYellow", { fg = "NONE", bg = C.yellow2 })
    hl("CocListBgMagenta", { fg = "NONE", bg = C.magenta })
    hl("CocSemType", { fg = C.yellow2 })
    hl("CocSemClass", { fg = C.yellow2 })
    hl("CocSemDecorator", { fg = C.magenta })
    hl("CocSemEnumMember", text_emphasis)
    hl("CocSemMacro", text_blue)
    hl("CocSemMethod", text_cyan)
    hl("CocSemNamespace", { fg = C.yellow2 })
    hl("CocSemProperty", { fg = C.blue1 })
    hl("CocSemRegexp", text_cyan)
    hl("CocSemModifier", text_red)
    hl("CocSemStruct", { fg = C.yellow2 })
    hl("CocSemTypeParameter", { fg = C.fg2 })
    hl("CocSemVariable", { fg = C.fg2 })
    hl("CocSemFunction", text_blue)
    hl("CocSemMacroBang", text_orange)
    hl("CocSemFormatSpecifier", text_cyan)
    hl("CocSemBuiltinAttribute", { fg = C.magenta })
    hl("CocSemColon", text_red)
    hl("CocSemAngle", text_orange)
    hl("CocSemCharacter", text_cyan)
    hl("CocSemKeyword", { italic = true })
    hl("CocSemComment", { fg = "NONE" })
    hl("CocSemReadonlyVariable", { italic = true })
    hl("CocSemStaticVariable", { italic = true })
    hl("CocSemCallableVariable", text_blue)
    hl("CocSemDeclarationFunction", text_cyan)
    hl("CocSemDefinitionFunction", text_cyan)
    hl("CocSemReferenceMethod", text_blue)
    hl("CocSemDeclarationMethod", text_cyan)
    hl("CocSemDefaultLibraryMethod", { fg = C.blue2, italic = true })
    hl("CocSemDeclarationSelfKeyword", text_red)
    hl("CocSemDeclarationMacro", text_cyan)
    hl("CocSemDefaultLibrary", { italic = true })
    hl("CocSemDocumentationKeyword", text_orange)
    hl("CocSemDocumentationType", { fg = C.yellow2 })
    hl("CocSemDocumentationDecorator", { fg = C.magenta })
    hl("CocSemDocumentationEnumMember", text_emphasis)
    hl("CocSemDocumentationMacro", text_blue)
    hl("CocSemDocumentationMethod", text_cyan)
    hl("CocSemDocumentationNamespace", { fg = C.yellow2 })
    hl("CocSemDocumentationProperty", { fg = C.blue1 })
    hl("CocSemDocumentationRegexp", text_cyan)
    hl("CocSemDocumentationModifier", text_red)
    hl("CocSemDocumentationStruct", text_yellow)
    hl("CocSemDocumentationTypeParameter", { fg = C.fg2 })
    hl("CocSemDocumentationVariable", { fg = C.fg2 })
    hl("CocSemDocumentationFunction", text_blue)
    hl("CocSymbolEnum", text_yellow)
    hl("CocSymbolStruct", text_yellow)
    hl("CocSymbolText", { fg = C.fg2 })
    hl("CocSymbolField", { fg = C.blue1 })
    hl("CocSymbolProperty", { fg = C.blue1 })
    hl("CocSymbolEnumMember", text_emphasis)
    hl("CocSymbolVariable", text_yellow)
    hl("CocSymbolFunction", text_blue)
    hl("CocTreeTitle", ui_title)
    hl("CocTreeDescription", { fg = C.fg2 })
    hl("CocTreeSelected", text_selected)
    hl("CocTreeOpenClose", { bold = true })
    hl("CocTreeDescription", muted)
    hl("fzf1", { fg = C.red2, bg = C.bg3 })
    hl("fzf2", { fg = C.red2, bg = C.bg3 })
    hl("fzf3", { fg = C.red2, bg = C.bg3 })
    -- hl("NavicIconsFile", { fg = C.fg3, bg = C.bg1 })
    -- hl("NavicIconsModule", { fg = C.yellow2, bg = C.bg1 })
    -- hl("NavicIconsNamespace", { fg = C.yellow2, bg = C.bg1 })
    -- hl("NavicIconsPackage", { fg = C.fg3, bg = C.bg1 })
    -- hl("NavicIconsClass", { fg = C.yellow2, bg = C.bg1 })
    -- hl("NavicIconsMethod", { fg = C.cyan2, bg = C.bg1 })
    -- hl("NavicIconsProperty", { fg = C.blue1, bg = C.bg1 })
    -- hl("NavicIconsField", { fg = C.blue1, bg = C.bg1 })
    -- hl("NavicIconsConstructor", { fg = C.yellow2, bg = C.bg1 })
    -- hl("NavicIconsEnum", { fg = C.yellow2, bg = C.bg1 })
    -- hl("NavicIconsInterface", { fg = C.yellow2, bg = C.bg1 })
    hl("NavicIconsFunction", { fg = C.red2, nocombine = true, bg = C.bg1 })
    -- hl("NavicIconsVariable", { fg = C.fg2, bg = C.bg1 })
    -- hl("NavicIconsConstant", { fg = C.fg1, bg = C.bg1 })
    -- hl("NavicIconsString", { fg = C.green, bg = C.bg1 })
    -- hl("NavicIconsNumber", { fg = C.yellow1, bg = C.bg1 })
    -- hl("NavicIconsBoolean", { fg = C.red2, italic = true, bg = C.bg1 })
    -- hl("NavicIconsArray", {})
    -- hl("NavicIconsObject", { fg = C.yellow2, bg = C.bg1 })
    -- hl("NavicIconsKey", { fg = C.blue2, bg = C.bg1 })
    -- hl("NavicIconsNull", { fg = C.magenta, italic = true, bg = C.bg1 })
    -- hl("NavicIconsEnumMember", { fg = C.blue1, bg = C.bg1 })
    -- hl("NavicIconsStruct", { fg = C.yellow2, bg = C.bg1 })
    -- hl("NavicIconsEvent", {})
    -- hl("NavicIconsOperator", { fg = C.orange, bg = C.bg1 })
    hl("NavicIconsTypeParameter", { fg = C.magenta, bg = C.bg1 })
    -- hl("NavicText", {})
    -- hl("NavicSeparator", {})
end

---@return Colors
M.colors = function()
    return M.config.colors
end

M:load()
